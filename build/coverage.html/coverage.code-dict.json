{"/home/travis/build/npmtest/node-npmtest-sloc/test.js":"/* istanbul instrument in package npmtest_sloc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sloc/lib.npmtest_sloc.js":"/* istanbul instrument in package npmtest_sloc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sloc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sloc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sloc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sloc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sloc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sloc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sloc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sloc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sloc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sloc.__dirname + '/lib.npmtest_sloc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/sloc.js":"// Generated by CoffeeScript 1.12.3\n\n/*\nThis program is distributed under the terms of the MIT license.\nCopyright 2012 - 2015 (c) Markus Kohlhase <mail@markus-kohlhase.de>\n */\n\n(function() {\n  var countComments, countMixed, emptyLines, emptyLns, endOfLine, extensions, getCommentExpressions, getStopRegex, getType, indexOfGroup, keys, lineSum, matchDefinedGroup, matchIdx, newLines, newLns, nonEmpty, slocModule, todoLines, todoLns, trampoline,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  keys = ['total', 'source', 'comment', 'single', 'block', 'mixed', 'empty', 'todo'];\n\n  nonEmpty = /[^\\s]/;\n\n  endOfLine = /$/m;\n\n  newLines = /\\n/g;\n\n  emptyLines = /^\\s*$/mg;\n\n  todoLines = /^.*TODO.*$/mg;\n\n  getCommentExpressions = function(lang) {\n    var r, single, start, stop;\n    single = (function() {\n      switch (lang) {\n        case \"coffee\":\n        case \"iced\":\n          return /\\#[^\\{]/;\n        case \"cr\":\n        case \"py\":\n        case \"ls\":\n        case \"mochi\":\n        case \"nix\":\n        case \"r\":\n        case \"rb\":\n        case \"jl\":\n        case \"pl\":\n        case \"yaml\":\n        case \"hr\":\n          return /\\#/;\n        case \"js\":\n        case \"jsx\":\n        case \"c\":\n        case \"cc\":\n        case \"cpp\":\n        case \"cs\":\n        case \"cxx\":\n        case \"h\":\n        case \"m\":\n        case \"mm\":\n        case \"hpp\":\n        case \"hx\":\n        case \"hxx\":\n        case \"ino\":\n        case \"java\":\n        case \"php\":\n        case \"php5\":\n        case \"go\":\n        case \"groovy\":\n        case \"scss\":\n        case \"less\":\n        case \"rs\":\n        case \"sass\":\n        case \"styl\":\n        case \"scala\":\n        case \"swift\":\n        case \"ts\":\n        case \"jade\":\n        case \"gs\":\n        case \"nut\":\n        case \"kt\":\n        case \"kts\":\n        case \"tsx\":\n          return /\\/{2}/;\n        case \"lua\":\n        case \"hs\":\n          return /--/;\n        case \"erl\":\n          return /\\%/;\n        case \"brs\":\n        case \"monkey\":\n        case \"vb\":\n          return /'/;\n        case \"nim\":\n          r = /(?:^[^\\#]*)(\\#)(?:(?![\\#\\!]))/;\n          r._matchGroup_ = 1;\n          return r;\n        case \"rkt\":\n        case \"clj\":\n        case \"cljs\":\n        case \"hy\":\n        case \"asm\":\n          return /;/;\n        default:\n          return null;\n      }\n    })();\n    switch (lang) {\n      case \"coffee\":\n      case \"iced\":\n        start = stop = /\\#{3}/;\n        break;\n      case \"js\":\n      case \"jsx\":\n      case \"c\":\n      case \"cc\":\n      case \"cpp\":\n      case \"cs\":\n      case \"cxx\":\n      case \"h\":\n      case \"m\":\n      case \"mm\":\n      case \"hpp\":\n      case \"hx\":\n      case \"hxx\":\n      case \"ino\":\n      case \"java\":\n      case \"ls\":\n      case \"nix\":\n      case \"php\":\n      case \"php5\":\n      case \"go\":\n      case \"css\":\n      case \"sass\":\n      case \"scss\":\n      case \"less\":\n      case \"rs\":\n      case \"styl\":\n      case \"scala\":\n      case \"ts\":\n      case \"gs\":\n      case \"groovy\":\n      case \"nut\":\n      case \"kt\":\n      case \"kts\":\n      case \"tsx\":\n        start = /\\/\\*+/;\n        stop = /\\*\\/{1}/;\n        break;\n      case \"python\":\n      case \"py\":\n        start = stop = /\\\"{3}|\\'{3}/;\n        break;\n      case \"handlebars\":\n      case \"hbs\":\n      case \"mustache\":\n        start = /\\{\\{\\!/;\n        stop = /\\}\\}/;\n        break;\n      case \"hs\":\n        start = /\\{-/;\n        stop = /-\\}/;\n        break;\n      case \"html\":\n      case \"htm\":\n      case \"svg\":\n      case \"xml\":\n        start = /<\\!--/;\n        stop = /-->/;\n        break;\n      case \"lua\":\n        start = /--\\[{2}/;\n        stop = /--\\]{2}/;\n        break;\n      case \"monkey\":\n        start = /#rem/i;\n        stop = /#end/i;\n        break;\n      case \"nim\":\n        start = /\\#{2}/;\n        break;\n      case \"rb\":\n        start = /\\=begin/;\n        stop = /\\=end/;\n        break;\n      case \"rkt\":\n        start = /#\\|/;\n        stop = /\\|#/;\n        break;\n      case \"jl\":\n        start = /\\#\\=/;\n        stop = /\\=\\#/;\n        break;\n      case \"ml\":\n      case \"mli\":\n        start = /\\(\\*/;\n        stop = /\\*\\)/;\n        break;\n      default:\n        if (indexOf.call(extensions, lang) >= 0) {\n          start = stop = null;\n        } else {\n          throw new TypeError(\"File extension '\" + lang + \"' is not supported\");\n        }\n    }\n    return {\n      start: start,\n      stop: stop,\n      single: single\n    };\n  };\n\n  countMixed = function(res, lines, idx, startIdx, match) {\n    var ref;\n    if ((nonEmpty.exec(lines[0])) && (((ref = res.last) != null ? ref.stop : void 0) === idx || startIdx === idx)) {\n      res.mixed.push({\n        start: idx,\n        stop: idx\n      });\n    }\n    if ((match != null) && nonEmpty.exec(lines.slice(-1)[0].substr(0, match.index))) {\n      return res.mixed.push({\n        start: startIdx,\n        stop: startIdx\n      });\n    }\n  };\n\n  getStopRegex = function(type, regex) {\n    switch (type) {\n      case 'single':\n        return endOfLine;\n      case 'block':\n        return regex || endOfLine;\n    }\n  };\n\n  getType = function(single, start) {\n    if (single && !start) {\n      return 'single';\n    } else if (start && !single) {\n      return 'block';\n    } else {\n      if (start.index <= single.index) {\n        return 'block';\n      } else {\n        return 'single';\n      }\n    }\n  };\n\n  matchIdx = function(m) {\n    return m.index + m[0].length;\n  };\n\n  emptyLns = function(c) {\n    var ref;\n    return ((ref = c.match(emptyLines)) != null ? ref.length : void 0) || 0;\n  };\n\n  newLns = function(c) {\n    var ref;\n    return ((ref = c.match(newLines)) != null ? ref.length : void 0) || 0;\n  };\n\n  todoLns = function(c) {\n    var ref;\n    return ((ref = c.match(todoLines)) != null ? ref.length : void 0) || 0;\n  };\n\n  indexOfGroup = function(match, n) {\n    var i, ix, j, ref;\n    ix = match.index;\n    for (i = j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n      ix += match[i].length;\n    }\n    return ix;\n  };\n\n  matchDefinedGroup = function(reg, code) {\n    var g, res;\n    res = reg != null ? reg.exec(code) : void 0;\n    if ((res != null) && ((g = reg != null ? reg._matchGroup_ : void 0) != null)) {\n      res.index = indexOfGroup(res, g);\n      res[0] = res[g];\n    }\n    return res;\n  };\n\n  countComments = function(code, regex) {\n    var myself;\n    myself = function(res, code, idx) {\n      var cStartIdx, comment, empty, len, lines, match, single, splitAt, start, startIdx, stop, type;\n      if (code === '') {\n        return res;\n      }\n      if (code[0] === '\\n') {\n        return function() {\n          return myself(res, code.slice(1), ++idx);\n        };\n      }\n      start = matchDefinedGroup(regex.start, code);\n      single = matchDefinedGroup(regex.single, code);\n      if (!(start || single)) {\n        countMixed(res, code.split('\\n'), idx);\n        return res;\n      }\n      type = getType(single, start);\n      match = (function() {\n        switch (type) {\n          case 'single':\n            return single;\n          case 'block':\n            return start;\n        }\n      })();\n      cStartIdx = matchIdx(match);\n      comment = code.substring(cStartIdx);\n      lines = code.substring(0, match.index).split('\\n');\n      startIdx = lines.length - 1 + idx;\n      stop = matchDefinedGroup(getStopRegex(type, regex.stop), comment);\n      if (!stop) {\n        res.error = true;\n        return res;\n      }\n      empty = emptyLns(code.substring(match.index, cStartIdx + matchIdx(stop)));\n      comment = comment.substring(0, stop.index);\n      len = newLns(comment);\n      splitAt = cStartIdx + comment.length + stop[0].length;\n      code = code.substring(splitAt);\n      countMixed(res, lines, idx, startIdx, match);\n      res.last = {\n        start: startIdx,\n        stop: startIdx + len,\n        empty: empty\n      };\n      res[type].push(res.last);\n      return function() {\n        return myself(res, code, startIdx + len);\n      };\n    };\n    return trampoline(myself({\n      single: [],\n      block: [],\n      mixed: []\n    }, code, 0));\n  };\n\n  trampoline = function(next) {\n    while (typeof next === 'function') {\n      next = next();\n    }\n    return next;\n  };\n\n  lineSum = function(comments) {\n    var c, d, i, j, len1, ref, sum;\n    sum = 0;\n    for (i = j = 0, len1 = comments.length; j < len1; i = ++j) {\n      c = comments[i];\n      d = (c.stop - c.start) + 1;\n      if (((ref = comments[i + 1]) != null ? ref.start : void 0) === c.stop) {\n        d--;\n      }\n      sum += d;\n    }\n    return sum;\n  };\n\n  slocModule = function(code, lang, opt) {\n    var b, bIdx, block, blockEmpty, comment, empty, j, k, len1, len2, mixed, ref, ref1, ref2, res, s, single, source, todo, total, x;\n    if (opt == null) {\n      opt = {};\n    }\n    if (typeof code !== \"string\") {\n      throw new TypeError(\"'code' has to be a string\");\n    }\n    code = code.replace(/\\r\\n|\\r/g, '\\n');\n    if (code.slice(-1) === '\\n') {\n      code = code.slice(0, -1);\n    }\n    total = (1 + newLns(code)) || 1;\n    empty = emptyLns(code);\n    res = countComments(code, getCommentExpressions(lang));\n    single = lineSum(res.single);\n    block = lineSum(res.block);\n    mixed = lineSum(res.mixed);\n    comment = block + single;\n    todo = todoLns(code);\n    bIdx = (function() {\n      var j, len1, ref, results;\n      ref = res.block;\n      results = [];\n      for (j = 0, len1 = ref.length; j < len1; j++) {\n        b = ref[j];\n        results.push(b.stop);\n      }\n      return results;\n    })();\n    ref = res.single;\n    for (j = 0, len1 = ref.length; j < len1; j++) {\n      s = ref[j];\n      if (ref1 = s.start, indexOf.call(bIdx, ref1) >= 0) {\n        comment--;\n      }\n    }\n    blockEmpty = 0;\n    ref2 = res.block;\n    for (k = 0, len2 = ref2.length; k < len2; k++) {\n      x = ref2[k];\n      blockEmpty += x.empty;\n    }\n    source = total - comment - empty + blockEmpty + mixed;\n    if (opt.debug) {\n      console.log(res);\n    }\n    return {\n      total: total,\n      source: source,\n      comment: comment,\n      single: single,\n      block: block,\n      mixed: mixed,\n      empty: empty,\n      todo: todo\n    };\n  };\n\n  extensions = [\"asm\", \"brs\", \"c\", \"cc\", \"clj\", \"cljs\", \"coffee\", \"cpp\", \"cr\", \"cs\", \"css\", \"cxx\", \"erl\", \"go\", \"groovy\", \"gs\", \"h\", \"handlebars\", \"hbs\", \"hpp\", \"hr\", \"hs\", \"html\", \"htm\", \"hx\", \"hxx\", \"hy\", \"iced\", \"ino\", \"jade\", \"java\", \"jl\", \"js\", \"jsx\", \"kt\", \"kts\", \"less\", \"lua\", \"ls\", \"ml\", \"mli\", \"mochi\", \"monkey\", \"mustache\", \"nix\", \"nim\", \"nut\", \"php\", \"php5\", \"pl\", \"py\", \"r\", \"rb\", \"rkt\", \"rs\", \"sass\", \"scala\", \"scss\", \"styl\", \"svg\", \"swift\", \"ts\", \"tsx\", \"vb\", \"xml\", \"yaml\", \"m\", \"mm\"];\n\n  slocModule.extensions = extensions;\n\n  slocModule.keys = keys;\n\n  if ((typeof define !== \"undefined\" && define !== null ? define.amd : void 0) != null) {\n    define(function() {\n      return slocModule;\n    });\n  } else if ((typeof module !== \"undefined\" && module !== null ? module.exports : void 0) != null) {\n    module.exports = slocModule;\n  } else if (typeof window !== \"undefined\" && window !== null) {\n    window.sloc = slocModule;\n  }\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/cli.js":"// Generated by CoffeeScript 1.12.3\n\n/*\nThis program is distributed under the terms of the MIT license.\nCopyright 2012 - 2016 (c) Markus Kohlhase <mail@markus-kohlhase.de>\n */\n\n(function() {\n  var async, collect, colorRegex, exts, filterFiles, fmtOpts, fmts, fs, groupByExt, helpers, k, keyvalue, list, object, options, parseFile, path, pkg, print, programm, readDir, readSingleFile, readSource, readdirp, sloc;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  async = require('async');\n\n  programm = require('commander');\n\n  readdirp = require('readdirp');\n\n  sloc = require('./sloc');\n\n  helpers = require('./helpers');\n\n  pkg = require('../package.json');\n\n  fmts = require('./formatters');\n\n  list = function(val) {\n    return val.split(',');\n  };\n\n  keyvalue = function(val) {\n    return val.split('=');\n  };\n\n  object = function(val) {\n    var custom, i, len, original, ref, result, split;\n    result = {};\n    ref = list(val).map(keyvalue);\n    for (i = 0, len = ref.length; i < len; i++) {\n      split = ref[i];\n      custom = split[0], original = split[1];\n      result[custom] = original;\n    }\n    return result;\n  };\n\n  exts = (function() {\n    var i, len, ref, results;\n    ref = sloc.extensions;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      k = ref[i];\n      results.push(\"*.\" + k);\n    }\n    return results;\n  })();\n\n  collect = function(val, memo) {\n    memo.push(val);\n    return memo;\n  };\n\n  colorRegex = /\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g;\n\n  parseFile = function(f, cb) {\n    var res;\n    if (cb == null) {\n      cb = function() {};\n    }\n    res = {\n      path: f,\n      stats: {},\n      badFile: false\n    };\n    return fs.readFile(f, \"utf8\", function(err, code) {\n      var ext;\n      if (err) {\n        res.badFile = true;\n        return cb(err, res);\n      }\n      ext = path.extname(f).slice(1);\n      res.stats = sloc(code, options.alias[ext] || ext);\n      return cb(null, res);\n    });\n  };\n\n  print = function(result, opts, fmtOpts) {\n    var f, fmt, out;\n    f = programm.format || 'simple';\n    if ((fmt = fmts[f]) == null) {\n      return console.error(\"Error: format \" + f + \" is not supported\");\n    }\n    out = fmt(result, opts, fmtOpts);\n    if (programm.stripColors) {\n      out = out.replace(colorRegex, '');\n    }\n    if (typeof out === \"string\") {\n      return console.log(out);\n    }\n  };\n\n  filterFiles = function(files) {\n    var exclude, i, len, r, res, results;\n    res = programm.exclude ? (exclude = new RegExp(programm.exclude), files.filter(function(x) {\n      return !exclude.test(x.path);\n    })) : files;\n    results = [];\n    for (i = 0, len = res.length; i < len; i++) {\n      r = res[i];\n      results.push(r.path);\n    }\n    return results;\n  };\n\n  options = {};\n\n  fmtOpts = [];\n\n  programm.version(pkg.version).usage('[option] <file> | <directory>').option('-e, --exclude <regex>', 'regular expression to exclude files and folders').option('-f, --format <format>', 'format output:' + ((function() {\n    var results;\n    results = [];\n    for (k in fmts) {\n      results.push(\" \" + k);\n    }\n    return results;\n  })()).join(',')).option('--format-option [value]', 'add formatter option', collect, fmtOpts).option('--strip-colors', 'remove all color characters').option('-k, --keys <keys>', 'report only numbers of the given keys', list).option('-d, --details', 'report stats of each analyzed file').option('-a, --alias <custom ext>=<standard ext>', 'alias custom ext to act like standard ext', object);\n\n  programm.parse(process.argv);\n\n  options.keys = programm.keys;\n\n  options.details = programm.details;\n\n  options.alias = programm.alias;\n\n  for (k in options.alias) {\n    exts.push(\"*.\" + k);\n  }\n\n  if (programm.args.length < 1) {\n    return programm.help();\n  }\n\n  groupByExt = function(data) {\n    var d, ext, f, i, len, m, map, ref;\n    map = {};\n    ref = data.files;\n    for (i = 0, len = ref.length; i < len; i++) {\n      f = ref[i];\n      ext = (path.extname(f.path)).slice(1);\n      m = map[ext] != null ? map[ext] : map[ext] = {\n        files: []\n      };\n      m.files.push(f);\n    }\n    for (ext in map) {\n      d = map[ext];\n      d.summary = helpers.summarize(d.files.map(function(x) {\n        return x.stats;\n      }));\n    }\n    return map;\n  };\n\n  readSingleFile = function(f, done) {\n    return parseFile(f, function(err, res) {\n      return done(err, [res]);\n    });\n  };\n\n  readDir = function(dir, done) {\n    var processFile;\n    processFile = function(f, next) {\n      return parseFile(path.join(dir, f), next);\n    };\n    return readdirp({\n      root: dir,\n      fileFilter: exts\n    }, function(err, res) {\n      if (err) {\n        return done(err);\n      }\n      return async.mapLimit(filterFiles(res.files), 1000, processFile, done);\n    });\n  };\n\n  readSource = function(p, done) {\n    return fs.lstat(p, function(err, stats) {\n      if (err) {\n        console.error(\"Error: invalid path argument \" + p);\n        return done(err);\n      }\n      if (stats.isDirectory()) {\n        return readDir(p, done);\n      } else if (stats.isFile()) {\n        return readSingleFile(p, done);\n      }\n    });\n  };\n\n  async.map(programm.args, readSource, function(err, parsed) {\n    var result;\n    if (err) {\n      return console.error(\"Error: \" + err);\n    }\n    result = {\n      files: []\n    };\n    parsed.forEach(function(files) {\n      return files.forEach(function(f) {\n        if (f.badFile) {\n          result.brokenFiles++;\n        }\n        return result.files.push(f);\n      });\n    });\n    result.summary = helpers.summarize(result.files.map(function(x) {\n      return x.stats;\n    }));\n    result.byExt = groupByExt(result);\n    return print(result, options, fmtOpts);\n  });\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/helpers.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  var alignRight, summarize;\n\n  alignRight = function(string, width) {\n    if (string == null) {\n      string = '';\n    }\n    if (width == null) {\n      width = 0;\n    }\n    if (!(typeof string === 'string' && typeof width === 'number' && width >= 0)) {\n      return '';\n    }\n    if (string.length >= width) {\n      return string.slice(-width);\n    } else {\n      return Array(width - string.length + 1).join(' ') + string;\n    }\n  };\n\n  summarize = function(fileStats) {\n    if (!(Array.isArray(fileStats) && fileStats.length > 0)) {\n      return {};\n    }\n    return fileStats.reduce(function(a, b) {\n      var i, k, len, o, ref, v, x;\n      o = {};\n      ref = [a, b];\n      for (i = 0, len = ref.length; i < len; i++) {\n        x = ref[i];\n        if (x != null) {\n          for (k in x) {\n            v = x[k];\n            if (!(typeof v === \"number\")) {\n              continue;\n            }\n            if (o[k] == null) {\n              o[k] = 0;\n            }\n            o[k] += v;\n          }\n        }\n      }\n      return o;\n    });\n  };\n\n  module.exports = {\n    alignRight: alignRight,\n    summarize: summarize\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/formatters.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  module.exports = {\n    'csv': require('./formatters/csv'),\n    'cli-table': require('./formatters/cli-table'),\n    'simple': require('./formatters/simple'),\n    'json': require('./formatters/json')\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/formatters/csv.js":"// Generated by CoffeeScript 1.12.3\n\n/*\nconvert data to CSV format for easy import into spreadsheets\n */\n\n(function() {\n  var i18n, sloc;\n\n  sloc = require('../sloc');\n\n  i18n = require('../i18n');\n\n  module.exports = function(data, options) {\n    var f, i, k, len, lineize, lines, ref, s;\n    if (options == null) {\n      options = {};\n    }\n    if (data == null) {\n      return console.error(\"Error: missing data\");\n    }\n    lines = i18n.en.Path + \",\" + (((function() {\n      var i, len, ref, results;\n      ref = sloc.keys;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        k = ref[i];\n        results.push(i18n.en[k]);\n      }\n      return results;\n    })()).join(',')) + \"\\n\";\n    lineize = function(t) {\n      return ((function() {\n        var i, len, ref, results;\n        ref = sloc.keys;\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n          k = ref[i];\n          results.push(t[k]);\n        }\n        return results;\n      })()).join(',');\n    };\n    if (options.details) {\n      ref = data.files;\n      for (i = 0, len = ref.length; i < len; i++) {\n        f = ref[i];\n        if (f.stats != null) {\n          lines += f.path + \",\" + (lineize(f.stats)) + \"\\n\";\n        }\n      }\n    } else if ((s = data.summary) != null) {\n      lines += i18n.en.Total + ',' + lineize(s);\n    }\n    if (lines[lines.length - 1] === '\\n') {\n      lines = lines.slice(0, -1);\n    }\n    return lines;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/i18n.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  module.exports = {\n    en: {\n      total: \"Physical\",\n      source: \"Source\",\n      comment: \"Comment\",\n      single: \"Single-line comment\",\n      block: \"Block comment\",\n      mixed: \"Mixed\",\n      empty: \"Empty\",\n      todo: \"To Do\",\n      Result: \"Result\",\n      Path: \"Path\",\n      Total: \"Total\",\n      Details: \"Details\",\n      Extension: \"Extension\",\n      Error: \"Error\",\n      BadDir: \"Bad directory\",\n      BadFile: \"Bad file\",\n      BadFormat: \"Bad format\",\n      BrokenFiles: \"Broken files\",\n      UnknownSourceFiles: \"Unknown source files\",\n      NumberOfFilesRead: \"Number of files read\",\n      BrokenDirectories: \"Broken directories\"\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/formatters/cli-table.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  var Table, i18n, path, sloc,\n    slice = [].slice,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Table = require('cli-table');\n\n  i18n = require('../i18n');\n\n  sloc = require('../sloc');\n\n  path = require('path');\n\n  module.exports = function(data, options, fmtOpts) {\n    var d, ext, f, head, heads, i, k, keys, len, ref, ref1, s, statToArray, table;\n    keys = options.keys || sloc.keys;\n    heads = options.details ? ['Path'].concat(slice.call(keys)) : ['Extension'].concat(slice.call(keys));\n    head = indexOf.call(fmtOpts, 'no-head') >= 0 ? [] : (function() {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = heads.length; i < len; i++) {\n        k = heads[i];\n        results.push(i18n.en[k]);\n      }\n      return results;\n    })();\n    table = new Table({\n      head: head\n    });\n    statToArray = function(d) {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = keys.length; i < len; i++) {\n        k = keys[i];\n        results.push(d[k]);\n      }\n      return results;\n    };\n    if (options.details) {\n      ref = data.files;\n      for (i = 0, len = ref.length; i < len; i++) {\n        f = ref[i];\n        table.push([f.path].concat(slice.call(statToArray(f.stats))));\n      }\n    } else if ((s = data.summary) != null) {\n      table.push(['- Total -'].concat(slice.call(statToArray(s))));\n      ref1 = data.byExt;\n      for (ext in ref1) {\n        d = ref1[ext];\n        if ((s = d.summary) != null) {\n          table.push([ext].concat(slice.call(statToArray(s))));\n        }\n      }\n    }\n    return table.toString();\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/formatters/simple.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  var align, col, colors, helpers, i18n, sloc, stat;\n\n  sloc = require('../sloc');\n\n  i18n = require('../i18n');\n\n  helpers = require('../helpers');\n\n  align = helpers.alignRight;\n\n  col = 20;\n\n  colors = {\n    source: \"green\",\n    comment: \"cyan\",\n    empty: \"yellow\"\n  };\n\n  stat = function(data, options) {\n    var c, i, k, n, str, x;\n    if (data.badFile) {\n      return (align(i18n.en.Error, col)) + \" :  \" + i18n.en.BadFile;\n    }\n    str = (function() {\n      var j, len, ref, results;\n      ref = options.keys;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        k = ref[j];\n        if (!((x = data.stats[k]) != null)) {\n          continue;\n        }\n        n = ((c = colors[k]) != null) && ((i = String(x)[c]) != null) ? i : x;\n        results.push((align(i18n.en[k], col)) + \" :  \" + n);\n      }\n      return results;\n    })();\n    return str.join('\\n');\n  };\n\n  module.exports = function(data, options, fmtOpts) {\n    var badFiles, bl, d, f, fileCount, result;\n    if (options == null) {\n      options = {};\n    }\n    if (options.keys == null) {\n      options.keys = sloc.keys;\n    }\n    result = \"\\n---------- \" + i18n.en.Result + \" ------------\\n\\n\";\n    result += stat({\n      stats: data.summary\n    }, options);\n    badFiles = data.files.filter(function(x) {\n      return x.badFile;\n    });\n    fileCount = data.files.length - badFiles.length;\n    result += \"\\n\\n\" + i18n.en.NumberOfFilesRead + \" :  \" + fileCount;\n    if (bl = badFiles.length > 0) {\n      result += \"\\n\" + (align(i18n.en.BrokenFiles, col)) + \" :  \" + (String(badFiles.length).red);\n    }\n    if (options.details && data.files.length > 1) {\n      result += \"\\n\\n---------- \" + i18n.en.Details + \" -----------\\n\";\n      d = (function() {\n        var j, len, ref, results;\n        ref = data.files;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          f = ref[j];\n          results.push(\"\\n\\n--- \" + f.path + \"\\n\\n\" + (stat(f, options)));\n        }\n        return results;\n      })();\n      result += d.join('');\n    }\n    return result += \"\\n\\n------------------------------\\n\";\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sloc/node_modules/sloc/lib/formatters/json.js":"// Generated by CoffeeScript 1.12.3\n(function() {\n  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  module.exports = function(res, options, fmtOpts) {\n    return JSON.stringify(res, null, (indexOf.call(fmtOpts, 'no-indent') >= 0 ? 0 : 2));\n  };\n\n}).call(this);\n"}